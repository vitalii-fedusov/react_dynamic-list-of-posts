{"version":3,"sources":["components/PostContext.tsx","components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/ErrorNotification.tsx","components/NewCommentForm.tsx","services/comments.ts","components/PostDetails.tsx","components/UserSelector.tsx","PostApp.tsx","services/post.ts","services/user.ts","App.tsx","index.tsx"],"names":["PostsContext","React","createContext","users","setUsers","posts","setPosts","selectedUser","setSelectedUser","selectedPost","setSelectedPost","comments","setComments","usePosts","useContext","PostsProvider","children","useState","value","useMemo","Provider","PostsList","className","map","post","id","title","type","classNames","onClick","newPost","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","ErrorNotification","NewCommentForm","errorMessage","onFail","postId","authorName","setAuthorName","authorEmail","setAuthorEmail","newCommentText","setNewCommentText","isLoading","setIsLoading","nameErrorMessage","setNameErrorMessage","emailErrorMessage","setEmailErrorMessage","bodyErrorMessage","setBodyErrorMessage","onSubmit","event","preventDefault","newComment","name","email","commentService","createdComment","updatedComments","catch","finally","htmlFor","placeholder","onChange","target","PostDetails","formIsActive","setFormIsActive","setErrorMessage","deleteComment","newComments","filter","com","getPostComments","useEffect","length","comment","href","UserSelector","isListVisible","setIsListVisible","handleClick","role","user","handleSelect","PostApp","getUserPosts","userId","userPosts","loadUsers","usersFromAPI","error","Error","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e83be68.chunk.js","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\n\ninterface IPostsContext {\n  users: User[],\n  setUsers: (listOfUsers: User[]) => void,\n  posts: Post[],\n  setPosts: (v: Post[]) => void,\n  selectedUser: User | null,\n  setSelectedUser: (newUser: User) => void,\n  selectedPost: Post | null,\n  setSelectedPost: (newPost: Post | null) => void,\n  comments: Comment[],\n  setComments: (newComments: Comment[]) => void,\n}\n\nexport const PostsContext = React.createContext<IPostsContext>({\n  users: [],\n  setUsers: () => {},\n  posts: [],\n  setPosts: () => { },\n  selectedUser: null,\n  setSelectedUser: () => {},\n  selectedPost: null,\n  setSelectedPost: () => {},\n  comments: [],\n  setComments: () => {},\n});\n\nexport const usePosts = (): IPostsContext => React.useContext(PostsContext);\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PostsProvider: React.FC<Props> = ({ children }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [users, setUsers] = useState<User[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const value = useMemo(() => ({\n    selectedUser,\n    setSelectedUser,\n    selectedPost,\n    setSelectedPost,\n    posts,\n    setPosts,\n    users,\n    setUsers,\n    comments,\n    setComments,\n  }), [selectedUser, posts, users, selectedPost, comments]);\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { usePosts } from './PostContext';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const { posts, selectedPost, setSelectedPost } = usePosts();\n\n  const handleOpenPost = (newPost: Post) => {\n    setSelectedPost(newPost);\n    if (selectedPost && selectedPost.id === newPost.id) {\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr data-cy=\"Post\" key={post.id}>\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames('button is-link', {\n                    'is-light': !selectedPost || selectedPost.id !== post.id,\n                  })}\n                  onClick={() => handleOpenPost(post)}\n                >\n                  {\n                    selectedPost && selectedPost.id === post.id\n                      ? 'Close'\n                      : 'Open'\n                  }\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","export const ErrorNotification: React.FC = () => {\n  return (\n    <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n      Something went wrong!\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport * as commentService from '../services/comments';\nimport { usePosts } from './PostContext';\nimport { CommentData } from '../types/Comment';\nimport { ErrorNotification } from './ErrorNotification';\n\ntype Props = {\n  errorMessage: string,\n  onFail: (message: string) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  errorMessage,\n  onFail = () => {},\n}) => {\n  const {\n    selectedPost,\n    comments,\n    setComments,\n  } = usePosts();\n  const postId = selectedPost?.id || 0;\n\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [newCommentText, setNewCommentText] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [nameErrorMessage, setNameErrorMessage] = useState('');\n  const [emailErrorMessage, setEmailErrorMessage] = useState('');\n  const [bodyErrorMessage, setBodyErrorMessage] = useState('');\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setNameErrorMessage('');\n    setAuthorName(event.target.value);\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmailErrorMessage('');\n    setAuthorEmail(event.target.value);\n  };\n\n  const handleCommentChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setBodyErrorMessage('');\n    setNewCommentText(event.target.value);\n  };\n\n  const clearFields = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setNewCommentText('');\n    setBodyErrorMessage('');\n    setEmailErrorMessage('');\n    setNameErrorMessage('');\n  };\n\n  const addComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const newComment: CommentData = {\n      postId,\n      name: authorName,\n      email: authorEmail,\n      body: newCommentText,\n    };\n\n    if (!authorName) {\n      setNameErrorMessage('Name is required');\n    }\n\n    if (!authorEmail) {\n      setEmailErrorMessage('Email is required');\n    }\n\n    if (!newCommentText) {\n      setBodyErrorMessage('Enter some text');\n    }\n\n    if (!authorEmail || !authorName || !newCommentText) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    commentService.addComment(newComment)\n      .then((createdComment) => {\n        const updatedComments = [...comments, createdComment];\n\n        setComments(updatedComments);\n      })\n      .catch(() => {\n        onFail('Something went wrong!');\n      })\n      .finally(() => {\n        setIsLoading(false);\n        setNewCommentText('');\n      });\n  };\n\n  return (\n    <>\n      {errorMessage ? (\n        <ErrorNotification />\n      ) : (\n        <form\n          data-cy=\"NewCommentForm\"\n          onSubmit={addComment}\n        >\n          <div className=\"field\" data-cy=\"NameField\">\n            <label className=\"label\" htmlFor=\"comment-author-name\">\n              Author Name\n            </label>\n\n            <div className=\"control has-icons-left has-icons-right\">\n              <input\n                type=\"text\"\n                name=\"name\"\n                id=\"comment-author-name\"\n                placeholder=\"Name Surname\"\n                className={classNames('input', {\n                  'is-danger': nameErrorMessage,\n                })}\n                value={authorName}\n                onChange={handleNameChange}\n              />\n\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-user\" />\n              </span>\n\n              {nameErrorMessage && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              )}\n            </div>\n\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              {nameErrorMessage}\n            </p>\n          </div>\n\n          <div className=\"field\" data-cy=\"EmailField\">\n            <label className=\"label\" htmlFor=\"comment-author-email\">\n              Author Email\n            </label>\n\n            <div className=\"control has-icons-left has-icons-right\">\n              <input\n                type=\"text\"\n                name=\"email\"\n                id=\"comment-author-email\"\n                placeholder=\"email@test.com\"\n                className={classNames('input', {\n                  'is-danger': emailErrorMessage,\n                })}\n                value={authorEmail}\n                onChange={handleEmailChange}\n              />\n\n              <span className=\"icon is-small is-left\">\n                <i className=\"fas fa-envelope\" />\n              </span>\n\n              {emailErrorMessage && (\n                <span\n                  className=\"icon is-small is-right has-text-danger\"\n                  data-cy=\"ErrorIcon\"\n                >\n                  <i className=\"fas fa-exclamation-triangle\" />\n                </span>\n              )}\n            </div>\n\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              {emailErrorMessage}\n            </p>\n          </div>\n\n          <div className=\"field\" data-cy=\"BodyField\">\n            <label className=\"label\" htmlFor=\"comment-body\">\n              Comment Text\n            </label>\n\n            <div className=\"control\">\n              <textarea\n                id=\"comment-body\"\n                name=\"body\"\n                placeholder=\"Type comment here\"\n                className={classNames('textarea', {\n                  'is-danger': bodyErrorMessage,\n                })}\n                value={newCommentText}\n                onChange={handleCommentChange}\n              />\n            </div>\n\n            {bodyErrorMessage && (\n              <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n                {bodyErrorMessage}\n              </p>\n            )}\n          </div>\n\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <button\n                type=\"submit\"\n                className={classNames('button is-link', {\n                  'is-loading': isLoading,\n                })}\n              >\n                Add\n              </button>\n            </div>\n\n            <div className=\"control\">\n              {/* eslint-disable-next-line react/button-has-type */}\n              <button\n                type=\"reset\"\n                className=\"button is-link is-light\"\n                onClick={clearFields}\n              >\n                Clear\n              </button>\n            </div>\n          </div>\n        </form>\n      )}\n    </>\n  );\n};\n","import { Comment, CommentData } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getPostComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = ({\n  postId, name, email, body,\n}: CommentData) => {\n  return client.post<Comment>('/comments', {\n    postId, name, email, body,\n  });\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { usePosts } from './PostContext';\nimport * as commentService from '../services/comments';\nimport { ErrorNotification } from './ErrorNotification';\n\nexport const PostDetails: React.FC = () => {\n  const {\n    selectedPost,\n    selectedUser,\n    comments,\n    setComments,\n  } = usePosts();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formIsActive, setFormIsActive] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const deleteComment = (id: number) => {\n    const newComments = [...comments].filter(com => com.id !== id);\n\n    setComments(newComments);\n\n    return commentService.deleteComment(id);\n  };\n\n  const getPostComments = (id: number) => {\n    setIsLoading(true);\n\n    return commentService.getPostComments(id)\n      .then(setComments)\n      .catch(() => {\n        setErrorMessage('Something went wrong!');\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  useEffect(() => {\n    if (selectedPost) {\n      getPostComments(selectedPost.id);\n      setFormIsActive(false);\n    }\n  }, [selectedPost]);\n\n  return (\n    <div\n      className=\"content\"\n      data-cy=\"PostDetails\"\n    >\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {errorMessage && (\n                <ErrorNotification />\n              )}\n\n              {!errorMessage && !comments.length ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                <>\n                  {!errorMessage && (\n                    <>\n                      <p className=\"title is-4\">Comments:</p>\n\n                      {comments.map(comment => (\n                        <article\n                          className=\"message is-small\"\n                          data-cy=\"Comment\"\n                          key={comment.id}\n                        >\n                          <div className=\"message-header\">\n                            <a\n                              href={`mailto:${selectedUser?.email}`}\n                              data-cy=\"CommentAuthor\"\n                            >\n                              {selectedUser?.name}\n                            </a>\n                            <button\n                              data-cy=\"CommentDelete\"\n                              type=\"button\"\n                              className=\"delete is-small\"\n                              aria-label=\"delete\"\n                              onClick={() => deleteComment(comment.id)}\n                            >\n                              delete button\n                            </button>\n                          </div>\n\n                          <div className=\"message-body\" data-cy=\"CommentBody\">\n                            {comment.body}\n                          </div>\n                        </article>\n                      ))}\n                    </>\n                  )}\n                </>\n              )}\n\n              {!errorMessage && !formIsActive && (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={() => setFormIsActive(true)}\n                >\n                  Write a comment\n                </button>\n              )}\n            </>\n          )}\n        </div>\n\n        {formIsActive && !errorMessage && (\n          <NewCommentForm\n            errorMessage={errorMessage}\n            onFail={setErrorMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { usePosts } from './PostContext';\nimport { User } from '../types/User';\n\nexport const UserSelector: React.FC = () => {\n  const {\n    users, selectedUser, setSelectedUser, setSelectedPost,\n  } = usePosts();\n  const [isListVisible, setIsListVisible] = useState(false);\n\n  const handleClick = () => {\n    setIsListVisible(!isListVisible);\n  };\n\n  const handleSelect = (user: User) => {\n    if (user.id === selectedUser?.id) {\n      handleClick();\n\n      return;\n    }\n\n    setSelectedUser(user);\n    setIsListVisible(false);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleClick}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        {isListVisible && (\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                onClick={() => handleSelect(user)}\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': selectedUser && selectedUser.id === user.id,\n                })}\n                key={user.id}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { usePosts } from './components/PostContext';\nimport * as postService from './services/post';\nimport * as userService from './services/user';\n\nexport const PostApp: React.FC = () => {\n  const {\n    selectedUser,\n    posts,\n    setPosts,\n    selectedPost,\n    setUsers,\n  } = usePosts();\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const getUserPosts = (id: number) => {\n    setIsLoading(true);\n\n    return postService.getUserPosts(id)\n      .then((userPosts) => {\n        setPosts(userPosts);\n      })\n      .catch(() => {\n        setErrorMessage('Something went wrong!');\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const loadUsers = () => {\n    return userService.getUsers()\n      .then((usersFromAPI) => {\n        setUsers(usersFromAPI);\n      })\n      .catch((error) => {\n        throw new Error(error);\n      });\n  };\n\n  useEffect(() => {\n    loadUsers();\n  });\n\n  useEffect(() => {\n    if (selectedUser) {\n      getUserPosts(selectedUser.id);\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {(selectedUser && !isLoading && !errorMessage) && (\n                  posts.length === 0 ? (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  ) : (\n                    <PostsList />\n                  )\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          {selectedUser && (\n            <div\n              data-cy=\"Sidebar\"\n              className={classNames(\n                'tile',\n                'is-parent',\n                'is-8-desktop',\n                'Sidebar',\n                {\n                  'Sidebar--open': selectedPost,\n                },\n              )}\n            >\n              <div className=\"tile is-child box is-success \">\n                <PostDetails />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getUserPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React from 'react';\nimport { PostApp } from './PostApp';\nimport { PostsProvider } from './components/PostContext';\n\nexport const App: React.FC = () => {\n  return (\n    <PostsProvider>\n      <PostApp />\n    </PostsProvider>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}